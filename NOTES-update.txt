On update (2008/10/15):


Problem: if we have structure definitions with deep structure, then
doing a functional update on a subcomponent of the structure is
ackward to express.  For example, given the following definitions:

   (define-struct world (color-1 color-2))
   (define-struct color (red green blue))
   (define a-world (make-world (make-color 0 0 0) (make-color 0 0 0)))

then updating the red component of the color-1 of a world to 255 is
the expression:

   (update-world-color-1 a-world
                         (update-color-red (world-color-1 a-world)
                                           255))


We propose a setf-style "update" form to concisely express this
substructure update.  The expression above can be written using
update:

   (update (color-red (world-color-1 a-world)) 17)

This will desugar to the functional update expression.  update
examines the first argument as a target that involving selectors.  It
produces the updating expression based on the structure of the target.


There is one complication that I ran across: the update form may not
always tell how to decompose a target form.  If the target uses
top-level selectors, it's clear how to process the target form.  i.e. in

    (define-struct color (r g b))
    ...
    (update (color-r (make-color 3 4 5)) 42)

update recognizes color-r is a selector by statically looking up
information that is stored at compile-time by define-struct.  It sees
that make-color does not syntactically look like a selector, so the
target pattern matching stops at make-color.



In a higher order context, selectors may be bound to identifiers that
update won't automatically recognize.

    ;; change-red-to-255: world (world -> color) -> world
    ;; Changes the red component of the color extracted with a-selector.
    ;; BROKEN
    (define (change-red-to-255 a-world a-selector)
      (update (color-red (a-selector a-world) 255)))

    (change-red-to-255 world-color-1)


update will recognize color-red as a selector, but won't recognize
a-selector, so the definition desugars to:

    (define (change-red-to-255 a-world a-selector)
      (update-color-red (a-selector a-world) 255))

which is not the intended update.



Update can't syntactically tell if an identifier is a selector without
some hinting.  To address this, I'm currently adding a scoped
with-selector/updater form that locally introduces that hint.

    (with-selector/updater ([selector updater] ...) body ...)

Within the lexical scope of body, uses of selector in an update form
will be recognized.


    ;; change-red-to-255: world (world -> color) (world color -> world) -> world
    ;; Changes the red component of the color extracted with a-selector.
    (define (change-red-to-255 a-world a-selector an-updater)
      (with-selector/updater ([a-selector an-updater])
        (update (color-red (a-selector a-world)) 255)))

With the additional syntactic hint, update will recognize a-selector
and the function body desugars to:

    (an-updater a-world
                (update-color-red (a-selector a-world) 255))


See examples/colors/colors-with-update.ss where this is used to
parameterize the guis based on the color component of the world.
