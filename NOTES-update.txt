On update (2008/10/15):


Given a structure definition, we currently provide functional updaters
to make it convenient to update a single field in a structure.  The
structure definition:

   (define-struct world (color-1 color-2))

in our language will also provide update-color-1 and update-color-2:

    update-color-1: world color -> world
    update-color-2: world color -> world


Shallow updates can be expressed easily using these updaters.
However, if we have structure definitions with deeper structure, doing
a functional update on a subcomponent of the structure is awkward to
express.  For example, given the following definitions:

   (define-struct world (color-1 color-2))
   (define-struct color (red green blue))
   (define a-world (make-world (make-color 0 0 0) (make-color 0 0 0)))

then updating the red component of the color-1 of a world to 255 is
the expression:

   (update-world-color-1 a-world
                         (update-color-red (world-color-1 a-world)
                                           255))

We propose a setf-style "update" form to concisely express this
substructure update.  The expression above can be written using
update:

   (update (color-red (world-color-1 a-world)) 17)

This will desugar to the functional update expression above.  update
examines the first argument as a target that involving selectors.  It
produces the updating expression based on the structure of the target.






This proposal works as long as targets are first-order.  If the target
uses top-level selectors, it's clear how to process the target form.
i.e. in

    (define-struct color (r g b))
    ...
    (update (color-r (make-color 3 4 5)) 42)

update recognizes color-r is a selector by statically looking up
information that is stored at compile-time by define-struct.  It sees
that make-color does not syntactically look like a selector, so the
target pattern matching stops at make-color.


In a higher order context, selectors may be bound to identifiers that
update won't automatically recognize.  It might be tempting to write:

    ;; change-red-to-255: world (world -> color) -> world
    ;; Changes the red component of the color extracted with a-selector.
    ;; BROKEN
    (define (change-red-to-255 a-world a-selector)
      (update (color-red (a-selector a-world) 255)))

    (change-red-to-255 world-color-1)


but update will recognize color-red as a selector, but won't recognize
a-selector, so the definition desugars to:

    (define (change-red-to-255 a-world a-selector)
      (update-color-red (a-selector a-world) 255))

which is not the intended update.


A proposed solution to the higher-order problem is to use the concept
of an accessor.  An accessor is a

    (make-accessor a-getter an-updater)

    ;; (define-struct make-accessor (getter updater))

where

    a-getter: world -> X
    an-updater: world X -> world
     
An accessor encapsulates field access.  The functions get/accessor and
update/accessor are defined to get and update a specific field:


;; get/accessor: (accessorof world X) world -> X
(define (get/accessor an-accessor a-world)
  ((accessor-getter an-accessor) a-world))


;; update/accessor: (accessorof world X) world X -> world
(define (update/accessor an-accessor a-world a-val)
  ((accessor-updater an-accessor) a-world a-val))


Accessors can be composed by chaining them:

;; chain-accessors: (accessorof world subworld) (accessorof subworld x) -> (world -> x)
(define (chain-accessors acc1 acc2)
  (make-accessor (lambda (a-world) 
                   ((accessor-getter acc2) 
                    ((accessor-getter acc1) a-world)))

                 (lambda (a-world a-val)
		  ((accessor-updater acc1)
                   ((accessor-updater acc2)
                     ((accessor-getter acc1) a-world)
                     a-val)))))


Accessors allow us to express deep structural update.  Assume that
define-struct introduces accessors for each field.

    (define-struct color (r g b))

will introduce color-r-accessor, color-g-accessor, and
color-b-accessor.


Then change-red-to-255 can be expressed as:

    (define-struct world (color-1 color-2))
    (define-struct color (r g b))

    ;; change-red-to-255: world accessor -> world
    ;; Changes the red component of the accessed color.
    (define (change-red-to-255 a-world world-color-accessor)
      (update/accessor (chain-accessors world-color-1-accessor 
                                        color-r-accessor)
                       a-world
                       255))

    (change-red-to-255 world-color-1-accessor)
