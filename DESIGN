Design document

----------------------------------------------------------------------

Gui


A 'gui' is one of the following:

     (message (gvalueof string))            ;; label text

   | (button (gvalueof string)              ;; label text
             (gvalueof boolean)             ;; enabled?
             callback)

   | (slider (gvalueof number)              ;; current value
             (gvalueof number)              ;; min
             (gvalueof number)              ;; max
             (gcallbackof number))

   | (drop-down (gvalueof string)           ;; current value
                (gvalueof (listof string))  ;; choices
                (gcallbackof string))

   | (text-field (gvalueof string)          ;; text
                 (gcallbackof string))

   | (scene (gvalueof scene))

   | (row (listof gui))

   | (col (listof gui))

where:

    callback: world -> world
    (gcallbackof t): world t -> world
    (gvalueof t): world -> t


A gui is a declarative definition of the view and controller of a
graphical program.  The gvalueof functions map the world model to the
view.  The gcallbackof functions map controller actions to the world
model.  The gui's display is refreshed whenever a user acts on the
controller, or when the current world changes.


Syntactic sugar: literals put in gvalueof position are treated as the
constant function that returns that value.  i.e.:

    (message "hello world")

should be treated as:

    (message (lambda (a-world) "hello world"))



----------------------------------------------------------------------

World


To hook into the world system, we provide two functions:

    big-bang: world gui -> #t

    on-tick: number (world -> world) -> #t


Minor differences from the original world functions:

    * The parameter describing the tick delay is moved from big-bang
      to the first argument on on-tick.

    * width and height are no longer passed into big-bang.  The gui will
      resize itself automatically to the minimum size necessary to fit
      everything.

----------------------------------------------------------------------

GUI Example: counter

A gui that contains a counter and a button that increments it:


;; A world is a number whose value is initially zero.
(define INITIAL-WORLD 0)

(define (on-button-pressed a-world)
  (add1 a-world))

(define (world-counter a-world)
  (number->string a-world))

(define counter-gui
  (col (message world-counter)
       (button "Press me!" on-button-pressed)))

(big-bang INITIAL-WORLD counter-gui)


on-tick is not used since there is no animation in this example.


(SK) Note on the number->string: maybe we should coerce the base types
to string to reduce the hassle to get working programs.

----------------------------------------------------------------------

Structure update

We expect structure definitions to also provide functional updaters.
For example:

    (define-struct 3d (x y z))


should bind identifiers

    update-3d-x
    update-3d-y
    update-3d-z

to the appropriate functional updaters.  We can reuse struct-copy.


----------------------------------------------------------------------


GUI Example: sliding ball

A ball moves across the screen, its radius controlled by a slider.

(define WIDTH 300)
(define HEIGHT 300)

(define MIN-RADIUS 20)
(define MAX-RADIUS 100)

;; A world is the ball's radius and its X coordinate
(define-struct world (radius x))


;; INITIAL-WORLD: world
;; The ball is of MIN-RADIUS radius, and all the way to the left.
(define INITIAL-WORLD (make-world MIN-RADIUS 0))

;; change-radius: world number -> world
;; Changes the radius to the new radius.
(define (change-radius a-world new-radius)
  (update-world-radius a-world new-radius))

;; move-ball: world -> world
;; Moves the ball to the right, circling around if it goes beyond.
(define (move-ball a-world)
  (update-world-x a-world (modulo (add1 (world-x a-world)) WIDTH)))

;; draw-world: world -> scene
;; Consumes the world, and draws the world.
(define (draw-world a-world)
  (place-image (circle radius "solid" "red")
               (world-x a-world)
               (/ HEIGHT 2)
               (empty-scene WIDTH HEIGHT)))

;; a-gui: gui with a scene on top, and a slider below it.
(define a-gui
  (col (scene draw-world)
       (slider world-radius MIN-RADIUS MAX-RADIUS change-radius)))

;; Let's fire up the world.
(big-bang INITIAL-WORLD a-gui)
(on-tick 1/30 move-ball)

----------------------------------------------------------------------


Consequences of the design


* We can support multiple scenes in a single gui, since each scene
element of a gui can take in a function from (world -> scene).  That
is, we can do:

  (row (scene world->scene-1)
       (scene world->scene-2))

to provide different perspective renderings of the world.



----------------------------------------------------------------------

Possible problems

* A user may intend to create a slider whose initial position is at
zero, and mistakenly try to do this:

    (slider 0 0 200 a-callback)

But this represents a slider that is constantly fixed to zero.  What
the user should say is:

    (slider world-slider-pos 0 200 a-callback)

where world-slider-pos, applied to the initial world, produces zero.
This is awkward, but I don't see a way around it yet.